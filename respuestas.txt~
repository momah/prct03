------------------------
21
------------------------
2.0.0p247 :011 > puts "\t\n"	
 => nil 	(interpola)
2.0.0p247 :012 > puts '\t\n'
\t\n
 => nil 	(no intrpola)
------------------------
22
------------------------
2.0.0p247 :013 > %q{hello worl\n}
 => "hello worl\\n" 	(interpola)
------------------------
23
------------------------
2.0.0p247 :014 > %Q{hello worl\n}
 => "hello worl\n" 	(no interpola)
------------------------
24
------------------------
2.0.0p247 :071"> a = 4
2.0.0p247 :072"> b = 2
2.0.0p247 :084 > c=<<HERE
2.0.0p247 :085"> --#{a}--
2.0.0p247 :086"> --#{b}--
2.0.0p247 :087"> HERE
 => "--4--\n--2--\n" 
2.0.0p247 :088 > puts c
--4--
--2--
 => nil 

------------------------
25
------------------------
2.0.0p247 :071"> a = 4
2.0.0p247 :072"> b = 2
2.0.0p247 :079 > c=<<'HERE'
2.0.0p247 :080'> --#{a}--
2.0.0p247 :081'> --#{b}--
2.0.0p247 :082'> HERE
 => "--\#{a}--\n--\#{b}--\n" 
2.0.0p247 :083 > puts c
--#{a}--
--#{b}--
 => nil 
------------------------
26
------------------------
2.0.0p247 :089 > s = "hello"
 => "hello" 
2.0.0p247 :090 > s[0,2]
 => "he" 
2.0.0p247 :091 > s[-1,1]
 => "o" 
2.0.0p247 :092 > s[0,10]
 => "hello" 
2.0.0p247 :093 > s[-2,-2]
 => nil 
2.0.0p247 :094 > 

------------------------
27
------------------------
2.0.0p247 :004 > g = "hello"
 => "hello" 
2.0.0p247 :005 > g << " world"
 => "hello world" 
2.0.0p247 :006 > g
 => "hello world" 
------------------------
28
------------------------
2.0.0p247 :007 > e = '.'*3
 => "..."
------------------------
29
------------------------
2.0.0p247 :002 > "#{a=a+1}" * 3
 => "222"
------------------------
30
------------------------
2.0.0p247 :001 > %W[this is a test]
 => ["this", "is", "a", "test"] 
2.0.0p247 :002 > %w[this is a test]
 => ["this", "is", "a", "test"] 
------------------------
31
------------------------
2.0.0p247 :003 > %W[\t \n]
 => ["\t", "\n"] 
------------------------
32
------------------------
2.0.0p247 :004 > %w[\t \n]
 => ["\\t", "\\n"] 
------------------------
33
------------------------
2.0.0p247 :005 > nils = Array.new(3)
 => [nil, nil, nil]
------------------------
34
------------------------
2.0.0p247 :007 > zeros = Array.new(3, 0)
 => [0, 0, 0] 
------------------------
35
------------------------
2.0.0p247 :008 > x = [[1,2],[3,4]]
 => [[1, 2], [3, 4]] 
2.0.0p247 :009 > b = Array.new(x) 
 => [[1, 2], [3, 4]] 
------------------------
36
------------------------
2.0.0p247 :010 > c = Array.new(3) {|i| 2*i} 
 => [0, 2, 4] 
------------------------
37
------------------------
2.0.0p247 :011 > a = ('a'..'e')
 => "a".."e" 
2.0.0p247 :012 > a = ('a'..'e').to_a
 => ["a", "b", "c", "d", "e"] 
2.0.0p247 :013 > a[-2,2]
 => ["d", "e"] 
2.0.0p247 :014 > a[0..2]
 => ["a", "b", "c"] 
2.0.0p247 :015 > a[1...2]
 => ["b"] 
2.0.0p247 :016 > a[-2...-1]
 => ["d"] 
2.0.0p247 :017 > a[-2...-2]
 => [] 
2.0.0p247 :018 > a[-2...-3]
 => [] 
2.0.0p247 :019 > a[-2..-3]
 => [] 
2.0.0p247 :020 > a[-2..-2]
 => ["d"] 
2.0.0p247 :021 > a[-2..-1]
 => ["d", "e"] 
------------------------
38
------------------------
2.0.0p247 :022 > a
 => ["a", "b", "c", "d", "e"] 
2.0.0p247 :023 > a[0..2] = %w{A B}
 => ["A", "B"] 
2.0.0p247 :024 > a
 => ["A", "B", "d", "e"] 
2.0.0p247 :025 > a[2..5] = %w{C D E}
 => ["C", "D", "E"] 
2.0.0p247 :026 > a
 => ["A", "B", "C", "D", "E"] 
2.0.0p247 :027 > a[0..2] = []
 => [] 
2.0.0p247 :028 > a
 => ["D", "E"] 
2.0.0p247 :029 > a[-1,1] = ['Z']
 => ["Z"] 
2.0.0p247 :030 > a
 => ["D", "Z"] 
2.0.0p247 :031 > a[-2,2] = nil
 => nil 
2.0.0p247 :032 > a
 => [nil] 
2.0.0p247 :033 > 
------------------------
39
------------------------
2.0.0p247 :033 > a = (1...4).to_a
 => [1, 2, 3] 
2.0.0p247 :034 > a = a + [4, 5]
 => [1, 2, 3, 4, 5] 
2.0.0p247 :035 > a += [[6, 7, 8]]
 => [1, 2, 3, 4, 5, [6, 7, 8]] 
2.0.0p247 :036 > a = a + 9
TypeError: no implicit conversion of Fixnum into Array
	from (irb):36:in `+'
	from (irb):36
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'
2.0.0p247 :038 >   a
 => [1, 2, 3, 4, 5, [6, 7, 8], 1, 2, 3, 4, 5, [6, 7, 8]] 
------------------------
40
------------------------
2.0.0p247 :001 > x = %w{a b c b a}
 => ["a", "b", "c", "b", "a"] 
2.0.0p247 :002 > x = x - %w{a b c b a}
 => [] 
------------------------
41
------------------------
2.0.0p247 :003 > z = [0]*8
 => [0, 0, 0, 0, 0, 0, 0, 0] 
------------------------
42
------------------------
2.0.0p247 :009 > a = []
 => [] 
2.0.0p247 :010 > a << 1
 => [1] 
2.0.0p247 :011 > a << 2 << 3
 => [1, 2, 3] 
2.0.0p247 :012 > a << [4, 5, 6]
 => [1, 2, 3, [4, 5, 6]] 
2.0.0p247 :013 > a.concat [7, 8]
 => [1, 2, 3, [4, 5, 6], 7, 8] 
------------------------
43
------------------------
2.0.0p247 :014 > a = [1, 1, 2, 2, 3, 3, 4]
 => [1, 1, 2, 2, 3, 3, 4] 
2.0.0p247 :015 > b = [5, 5, 4, 4, 3, 3, 2]
 => [5, 5, 4, 4, 3, 3, 2] 
2.0.0p247 :016 > c = a | b
 => [1, 2, 3, 4, 5] 
2.0.0p247 :017 > d = b | a
 => [5, 4, 3, 2, 1] 
2.0.0p247 :018 > e = a & b
 => [2, 3, 4] 
2.0.0p247 :019 > f = b & a
 => [4, 3, 2]
------------------------
44
------------------------
2.0.0p247 :001 > a  = 1..10
 => 1..10 
2.0.0p247 :002 > a.class
 => Range 
2.0.0p247 :003 > a.to_a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
2.0.0p247 :004 > b = 1..10
 => 1..10 
2.0.0p247 :005 > b.to_a
 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
2.0.0p247 :006 > b.class
 => Range 
2.0.0p247 :007 > b.include? 10
 => true 
2.0.0p247 :008 > a.include? 8
 => true 
b.step(2 {|x| print "#{x} " })
                             ^
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'
2.0.0p247 :010 > b.step(2) {|x| print "#{x} " }
1 3 5 7 9  => 1..10 
2.0.0p247 :011 > 
------------------------
45
------------------------
2.0.0p247 :001 > r = 0...100
 => 0...100 
2.0.0p247 :002 > r.member? 50
 => true 
2.0.0p247 :003 > r.include? 99.9
 => true 
2.0.0p247 :004 > r.member? 99.9
 => true 
------------------------
46
------------------------
2.0.0p247 :005 > true.class
 => TrueClass 
2.0.0p247 :006 > false.class
 => FalseClass 
2.0.0p247 :007 > puts "hello" if 0
hello
 => nil 
2.0.0p247 :008 > puts "hello" if nil
 => nil 
2.0.0p247 :009 > puts "hello" if ""
(irb):9: warning: string literal in condition
hello
 => nil 
------------------------
47
------------------------
2.0.0p247 :010 > x = :sym
 => :sym 
2.0.0p247 :011 > x.class
 => Symbol 
2.0.0p247 :012 > x == 'sym'
 => false 
2.0.0p247 :013 > x == :sym
 => true 
2.0.0p247 :014 > x
 => :sym 
2.0.0p247 :015 > z = :'a long symbol'
 => :"a long symbol" 
2.0.0p247 :016 > z.class
 => Symbol 
2.0.0p247 :017 > x == 'sym'.to_sym
 => true 
2.0.0p247 :018 > x.to_s == 'sym'
 => true 
------------------------
48
------------------------
2.0.0p247 :019 > s = "Ruby"
 => "Ruby" 
2.0.0p247 :020 > t = s
 => "Ruby" 
2.0.0p247 :021 > t[-1] = ""
 => "" 
2.0.0p247 :022 > print s
Rub => nil 
2.0.0p247 :023 > t = "java"
 => "java" 
2.0.0p247 :024 > print s, t
Rubjava => nil
------------------------
49
------------------------
2.0.0p247 :001 > "%d %s" % [3, "rubies"]
 => "3 rubies" 
------------------------
50
------------------------
2.0.0p247 :001 > x, y = 4, 5
 => [4, 5] 
2.0.0p247 :002 > z = x > y ? x : y
 => 5 
2.0.0p247 :003 > xyz = [1, 2, 3]
 => [1, 2, 3] 
------------------------
51
------------------------
2.0.0p247 :004 > x = { :a => 1, :b => 2 }
 => {:a=>1, :b=>2} 
2.0.0p247 :005 > x.keys
 => [:a, :b] 
2.0.0p247 :006 > x.values
 => [1, 2] 
2.0.0p247 :007 > x[:c] = 3
 => 3 
2.0.0p247 :008 > x
 => {:a=>1, :b=>2, :c=>3} 
2.0.0p247 :009 > x.delete('a')
 => nil 
2.0.0p247 :010 > x
 => {:a=>1, :b=>2, :c=>3} 
2.0.0p247 :011 > x = { :a => 1, :b => 2, :c => 4}
 => {:a=>1, :b=>2, :c=>4} 
2.0.0p247 :012 > x.delete_if {|k, v| v % 2 == 0}
 => {:a=>1} 
2.0.0p247 :013 > x
 => {:a=>1} 
------------------------
52
------------------------
Llama al bloque que se llama con los argumentos 4, 5
------------------------
53
------------------------
2.0.0p247 :016 > counts = Hash.new(0)
 => {}  
counts = Hash.new(0) crea un hash que contiene un ceros
es lo mismo que hacer 
2.0.0p247 :017 > counts2 = {}
 => {} 
2.0.0p247 :018 > counts2 == counts
 => true


2.0.0p247 :019 > counts[2]
 => 0 
2.0.0p247 :020 > counts[1]
 => 0 
2.0.0p247 :021 > counts[0]
 => 0 
2.0.0p247 :022 > counts[45]
 => 0 
------------------------
54
------------------------
2.0.0p247 :024 > 'hello world, hello LPP'.scan /\w+/
 => ["hello", "world", "hello", "LPP"] 
------------------------
55
------------------------
2.0.0p247 :001 > c = { :a => 3, :b => 2, :c => 1}
 => {:a=>3, :b=>2, :c=>1} 
2.0.0p247 :002 > c.keys.sort.each {|k| puts c[k] }
3
2
1
 => [:a, :b, :c] 

